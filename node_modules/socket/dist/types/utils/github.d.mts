import { graphql as OctokitGraphql } from '@octokit/graphql';
import { Octokit } from '@octokit/rest';
import type { components } from '@octokit/openapi-types';
import type { JsonContent } from '@socketsecurity/registry/lib/fs';
export type Pr = components['schemas']['pull-request'];
export declare function writeCache(key: string, data: JsonContent): Promise<void>;
export declare function cacheFetch<T>(key: string, fetcher: () => Promise<T>, ttlMs?: number | undefined): Promise<T>;
export type GhsaDetails = {
    ghsaId: string;
    cveId?: string;
    summary: string;
    severity: string;
    publishedAt: string;
    withdrawnAt?: string;
    references: Array<{
        url: string;
    }>;
    vulnerabilities: {
        nodes: Array<{
            package: {
                ecosystem: string;
                name: string;
            };
            vulnerableVersionRange: string;
        }>;
    };
};
export declare function fetchGhsaDetails(ids: string[]): Promise<Map<string, GhsaDetails>>;
export declare function getOctokit(): Octokit;
export declare function getOctokitGraphql(): typeof OctokitGraphql;
export type PrAutoMergeState = {
    enabled: boolean;
    details?: string[];
};
export declare function enablePrAutoMerge({ node_id: prId }: Pr): Promise<PrAutoMergeState>;
export declare function prExistForBranch(owner: string, repo: string, branch: string): Promise<boolean>;
export declare function setGitRemoteGithubRepoUrl(owner: string, repo: string, token: string, cwd?: string): Promise<boolean>;
//# sourceMappingURL=github.d.mts.map