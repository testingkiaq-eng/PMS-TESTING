import type { EcosystemString } from '@socketsecurity/registry';
import type { components } from '@socketsecurity/sdk/types/api';
export type PURL_Type = components['schemas']['SocketPURL_Type'];
type ExpectNever<T extends never> = T;
type MissingInEcosystemString = Exclude<PURL_Type, EcosystemString>;
type ExtraInEcosystemString = Exclude<EcosystemString, PURL_Type>;
export type _Check_EcosystemString_has_all_purl_types = ExpectNever<MissingInEcosystemString>;
export type _Check_EcosystemString_has_no_extras = ExpectNever<ExtraInEcosystemString>;
export declare const ALL_ECOSYSTEMS: readonly ["apk", "bitbucket", "cargo", "chrome", "cocoapods", "composer", "conan", "conda", "cran", "deb", "docker", "gem", "generic", "github", "golang", "hackage", "hex", "huggingface", "maven", "mlflow", "npm", "nuget", "oci", "pub", "pypi", "qpkg", "rpm", "swift", "swid", "unknown"];
type AllEcosystemsUnion = (typeof ALL_ECOSYSTEMS)[number];
type MissingInAllEcosystems = Exclude<PURL_Type, AllEcosystemsUnion>;
type ExtraInAllEcosystems = Exclude<AllEcosystemsUnion, PURL_Type>;
export type _Check_ALL_ECOSYSTEMS_has_all_purl_types = ExpectNever<MissingInAllEcosystems>;
export type _Check_ALL_ECOSYSTEMS_has_no_extras = ExpectNever<ExtraInAllEcosystems>;
export declare const ALL_SUPPORTED_ECOSYSTEMS: Set<string>;
export declare function getEcosystemChoicesForMeow(): string[];
export declare function isValidEcosystem(value: string): value is PURL_Type;
export declare function parseEcosystems(value: string | string[] | undefined): PURL_Type[];
export {};
//# sourceMappingURL=ecosystem.d.mts.map