import type { CResult } from '../types.mts';
export interface SocketJson {
    ' _____         _       _     ': string;
    '|   __|___ ___| |_ ___| |_   ': string;
    "|__   | . |  _| '_| -_|  _|  ": string;
    '|_____|___|___|_,_|___|_|.dev': string;
    version: number;
    defaults?: {
        manifest?: {
            conda?: {
                disabled?: boolean;
                infile?: string;
                outfile?: string;
                stdin?: boolean;
                stdout?: boolean;
                target?: string;
                verbose?: boolean;
            };
            gradle?: {
                disabled?: boolean;
                bin?: string;
                gradleOpts?: string;
                verbose?: boolean;
            };
            sbt?: {
                disabled?: boolean;
                infile?: string;
                stdin?: boolean;
                bin?: string;
                outfile?: string;
                sbtOpts?: string;
                stdout?: boolean;
                verbose?: boolean;
            };
        };
        scan?: {
            create?: {
                autoManifest?: boolean;
                repo?: string;
                report?: boolean;
                branch?: string;
            };
            github?: {
                all?: boolean;
                githubApiUrl?: string;
                orgGithub?: string;
                repos?: string;
            };
        };
    };
}
export declare function readOrDefaultSocketJson(cwd: string): SocketJson;
export declare function getDefaultSocketJson(): SocketJson;
export declare function readSocketJsonSync(cwd: string, defaultOnError?: boolean): CResult<SocketJson>;
export declare function writeSocketJson(cwd: string, sockJson: SocketJson): Promise<CResult<undefined>>;
//# sourceMappingURL=socket-json.d.mts.map