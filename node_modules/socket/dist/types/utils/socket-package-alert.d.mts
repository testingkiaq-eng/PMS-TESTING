import { ALERT_SEVERITY } from './alert/severity.mts';
import type { ALERT_ACTION, CompactSocketArtifact, CompactSocketArtifactAlert } from './alert/artifact.mts';
import type { PURL_Type } from './ecosystem.mts';
import type { SocketYml } from '@socketsecurity/config';
import type { Spinner } from '@socketsecurity/registry/lib/spinner';
export declare const ALERT_SEVERITY_COLOR: Readonly<{
    readonly critical: "magenta";
    readonly high: "red";
    readonly middle: "yellow";
    readonly low: "white";
}>;
export declare const ALERT_SEVERITY_ORDER: Readonly<{
    readonly critical: 0;
    readonly high: 1;
    readonly middle: 2;
    readonly low: 3;
    readonly none: 4;
}>;
export type SocketPackageAlert = {
    name: string;
    version: string;
    key: string;
    type: string;
    blocked: boolean;
    critical: boolean;
    ecosystem: PURL_Type;
    fixable: boolean;
    raw: CompactSocketArtifactAlert;
    upgradable: boolean;
};
export type AlertsByPurl = Map<string, SocketPackageAlert[]>;
export type RiskCounts = {
    critical: number;
    high: number;
    middle: number;
    low: number;
};
export type AlertFilter = {
    actions?: ALERT_ACTION[] | undefined;
    blocked?: boolean | undefined;
    critical?: boolean | undefined;
    cve?: boolean | undefined;
    existing?: boolean | undefined;
    fixable?: boolean | undefined;
    upgradable?: boolean | undefined;
};
export type AddArtifactToAlertsMapOptions = {
    consolidate?: boolean | undefined;
    filter?: AlertFilter | undefined;
    overrides?: {
        [key: string]: string;
    } | undefined;
    socketYml?: SocketYml | undefined;
    spinner?: Spinner | undefined;
};
export declare function addArtifactToAlertsMap<T extends AlertsByPurl>(artifact: CompactSocketArtifact, alertsByPurl: T, options?: AddArtifactToAlertsMapOptions | undefined): Promise<T>;
export declare function alertsHaveBlocked(alerts: SocketPackageAlert[]): boolean;
export declare function alertsHaveSeverity(alerts: SocketPackageAlert[], severity: `${keyof typeof ALERT_SEVERITY}`): boolean;
export declare function alertSeverityComparator(a: SocketPackageAlert, b: SocketPackageAlert): number;
export declare function getAlertSeverityOrder(alert: SocketPackageAlert): number;
export declare function getAlertsSeverityOrder(alerts: SocketPackageAlert[]): number;
export type CveFilter = {
    upgradable?: boolean | undefined;
};
export type CveInfoByAlertKey = Map<string, {
    firstPatchedVersionIdentifier: string;
    vulnerableVersionRange: string;
}>;
export type CveInfoByPartialPurl = Map<string, CveInfoByAlertKey>;
export type GetCveInfoByPackageOptions = {
    filter?: CveFilter | undefined;
};
export declare function getCveInfoFromAlertsMap(alertsMap: AlertsByPurl, options?: GetCveInfoByPackageOptions | undefined): CveInfoByPartialPurl | null;
export declare function getSeverityLabel(severity: `${keyof typeof ALERT_SEVERITY}`): string;
export type LogAlertsMapOptions = {
    hideAt?: `${keyof typeof ALERT_SEVERITY}` | 'none' | undefined;
    output?: NodeJS.WriteStream | undefined;
};
export declare function logAlertsMap(alertsMap: AlertsByPurl, options: LogAlertsMapOptions): void;
//# sourceMappingURL=socket-package-alert.d.mts.map