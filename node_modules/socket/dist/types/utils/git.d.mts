import type { CResult } from '../types.mts';
export declare function getBaseBranch(cwd?: string): Promise<string>;
export type RepoInfo = {
    owner: string;
    repo: string;
};
export declare function getRepoInfo(cwd?: string): Promise<RepoInfo | null>;
export declare function getRepoName(cwd?: string): Promise<string>;
export declare function getRepoOwner(cwd?: string): Promise<string | null>;
export declare function gitBranch(cwd?: string): Promise<string | null>;
/**
 * Try to detect the default branch name by checking common patterns.
 * Returns the first branch that exists in the repository.
 */
export declare function detectDefaultBranch(cwd?: string): Promise<string>;
export type GitCreateAndPushBranchOptions = {
    cwd?: string | undefined;
    email?: string | undefined;
    user?: string | undefined;
};
export declare function gitCleanFdx(cwd?: string): Promise<boolean>;
export declare function gitCheckoutBranch(branch: string, cwd?: string): Promise<boolean>;
export declare function gitCreateBranch(branch: string, cwd?: string): Promise<boolean>;
export declare function gitPushBranch(branch: string, cwd?: string): Promise<boolean>;
export declare function gitCommit(commitMsg: string, filepaths: string[], options?: GitCreateAndPushBranchOptions | undefined): Promise<boolean>;
export declare function gitDeleteBranch(branch: string, cwd?: string): Promise<boolean>;
export declare function gitEnsureIdentity(name: string, email: string, cwd?: string): Promise<void>;
export declare function gitLocalBranchExists(branch: string, cwd?: string): Promise<boolean>;
export declare function gitRemoteBranchExists(branch: string, cwd?: string): Promise<boolean>;
export declare function gitResetAndClean(branch?: string, cwd?: string): Promise<void>;
export declare function gitResetHard(branch?: string, cwd?: string): Promise<boolean>;
export declare function gitUnstagedModifiedFiles(cwd?: string): Promise<CResult<string[]>>;
export declare function parseGitRemoteUrl(remoteUrl: string): RepoInfo | null;
//# sourceMappingURL=git.d.mts.map