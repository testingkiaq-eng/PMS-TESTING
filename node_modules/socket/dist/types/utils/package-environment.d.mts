import { Logger } from '@socketsecurity/registry/lib/logger';
import type { CResult } from '../types.mts';
import type { Remap } from '@socketsecurity/registry/lib/objects';
import type { EditablePackageJson } from '@socketsecurity/registry/lib/packages';
import type { SemVer } from 'semver';
export declare const AGENTS: readonly ["bun", "npm", "pnpm", "yarn/berry", "yarn/classic", "vlt"];
export type Agent = (typeof AGENTS)[number];
export type EnvBase = {
    agent: Agent;
    agentExecPath: string;
    agentSupported: boolean;
    features: {
        // Fixed by https://github.com/npm/cli/pull/8089.
        // Landed in npm v11.2.0.
        npmBuggyOverrides: boolean;
    };
    nodeSupported: boolean;
    nodeVersion: SemVer;
    npmExecPath: string;
    pkgRequirements: {
        agent: string;
        node: string;
    };
    pkgSupports: {
        agent: boolean;
        node: boolean;
    };
};
export type EnvDetails = Readonly<Remap<EnvBase & {
    agentVersion: SemVer;
    editablePkgJson: EditablePackageJson;
    lockName: string;
    lockPath: string;
    lockSrc: string;
    pkgPath: string;
}>>;
export type DetectAndValidateOptions = {
    cmdName?: string | undefined;
    logger?: Logger | undefined;
    prod?: boolean | undefined;
};
export type DetectOptions = {
    cwd?: string | undefined;
    onUnknown?: (pkgManager: string | undefined) => void;
};
export type PartialEnvDetails = Readonly<Remap<EnvBase & {
    agentVersion: SemVer | undefined;
    editablePkgJson: EditablePackageJson | undefined;
    lockName: string | undefined;
    lockPath: string | undefined;
    lockSrc: string | undefined;
    pkgPath: string | undefined;
}>>;
export type ReadLockFile = ((lockPath: string) => Promise<string | undefined>) | ((lockPath: string, agentExecPath: string) => Promise<string | undefined>) | ((lockPath: string, agentExecPath: string, cwd: string) => Promise<string | undefined>);
export declare function detectPackageEnvironment({ cwd, onUnknown }?: DetectOptions): Promise<EnvDetails | PartialEnvDetails>;
export declare function detectAndValidatePackageEnvironment(cwd: string, options?: DetectAndValidateOptions | undefined): Promise<CResult<EnvDetails>>;
//# sourceMappingURL=package-environment.d.mts.map