import type { MeowFlags } from '../flags.mts';
import type { Options, Result } from 'meow';
export interface CliAlias {
    description: string;
    argv: readonly string[];
    hidden?: boolean | undefined;
}
export type CliAliases = Record<string, CliAlias>;
export type CliSubcommandRun = (argv: string[] | readonly string[], importMeta: ImportMeta, context: {
    parentName: string;
}) => Promise<void> | void;
export interface CliSubcommand {
    description: string;
    hidden?: boolean | undefined;
    run: CliSubcommandRun;
}
// Property names are picked such that the name is at the top when the props
// get ordered by alphabet while flags is near the bottom and the help text
// at the bottom, because they tend ot occupy the most lines of code.
export interface CliCommandConfig {
    commandName: string;
    description: string;
    hidden: boolean;
    flags: MeowFlags;
    help: (command: string, config: CliCommandConfig) => string;
}
export interface MeowOptions extends Options<any> {
    aliases?: CliAliases | undefined;
    argv: readonly string[];
    name: string;
    // When no sub-command is given, default to this sub-command.
    defaultSub?: string;
}
export declare function getLastSeenCommand(): string;
export declare function meowWithSubcommands(subcommands: Record<string, CliSubcommand>, options: MeowOptions): Promise<void>;
/**
 * Note: meow will exit immediately if it calls its .showHelp()
 */
export declare function meowOrExit({ allowUnknownFlags, argv, config, importMeta, parentName }: {
    allowUnknownFlags?: boolean | undefined;
    argv: readonly string[];
    config: CliCommandConfig;
    parentName: string;
    importMeta: ImportMeta;
}): Result<MeowFlags>;
export declare function emitBanner(name: string, orgFlag: string | undefined): void;
//# sourceMappingURL=meow-with-subcommands.d.mts.map