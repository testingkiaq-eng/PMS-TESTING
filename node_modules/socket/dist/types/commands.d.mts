#!/usr/bin/env node
export declare const rootCommands: {
    analytics: {
        description: string;
        hidden: boolean;
        run: (argv: string[] | readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
    "audit-log": {
        description: string;
        hidden: boolean;
        run: (argv: string[] | readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
    ci: {
        description: string;
        hidden: boolean;
        run: (argv: string[] | readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
    cdxgen: {
        description: string;
        hidden: boolean;
        run: (argv: string[] | readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
    config: import("./utils/meow-with-subcommands.mts").CliSubcommand;
    dependencies: {
        description: string;
        hidden: boolean;
        run: (argv: string[] | readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
    fix: {
        description: string;
        hidden: boolean;
        run: (argv: string[] | readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
    install: import("./utils/meow-with-subcommands.mts").CliSubcommand;
    json: {
        description: string;
        hidden: boolean;
        run: (argv: string[] | readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
    license: {
        description: string;
        hidden: boolean;
        run: (argv: string[] | readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
    login: {
        description: string;
        hidden: boolean;
        run: (argv: string[] | readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
    logout: {
        description: string;
        hidden: boolean;
        run: (argv: string[] | readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
    manifest: {
        description: string;
        hidden: boolean;
        run: (argv: string[] | readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
    npm: {
        description: string;
        hidden: boolean;
        run: (argv: string[] | readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
    npx: {
        description: string;
        hidden: boolean;
        run: (argv: string[] | readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
    oops: {
        description: string;
        hidden: boolean;
        run: (argv: string[] | readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
    optimize: {
        description: string;
        hidden: boolean;
        run: (argv: string[] | readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
    organization: import("./utils/meow-with-subcommands.mts").CliSubcommand;
    package: import("./utils/meow-with-subcommands.mts").CliSubcommand;
    patch: {
        description: string;
        hidden: boolean;
        run: (argv: string[] | readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
    "raw-npm": {
        description: string;
        hidden: boolean;
        run: (argv: readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
    "raw-npx": {
        description: string;
        hidden: boolean;
        run: (argv: readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
    repository: import("./utils/meow-with-subcommands.mts").CliSubcommand;
    scan: import("./utils/meow-with-subcommands.mts").CliSubcommand;
    security: {
        description: string;
        hidden: boolean;
        run: (argv: string[] | readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
    "threat-feed": {
        description: string;
        hidden: boolean;
        run: (argv: readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
    uninstall: import("./utils/meow-with-subcommands.mts").CliSubcommand;
    wrapper: {
        description: string;
        hidden: boolean;
        run: (argv: readonly string[], importMeta: ImportMeta, { parentName }: {
            parentName: string;
        }) => Promise<void>;
    };
};
export declare const rootAliases: {
    audit: {
        description: string;
        hidden: boolean;
        argv: string[];
    };
    auditLog: {
        description: string;
        hidden: boolean;
        argv: string[];
    };
    auditLogs: {
        description: string;
        hidden: boolean;
        argv: string[];
    };
    "audit-logs": {
        description: string;
        hidden: boolean;
        argv: string[];
    };
    deps: {
        description: string;
        hidden: boolean;
        argv: string[];
    };
    feed: {
        description: string;
        hidden: boolean;
        argv: string[];
    };
    org: {
        description: string;
        hidden: boolean;
        argv: string[];
    };
    orgs: {
        description: string;
        hidden: boolean;
        argv: string[];
    };
    organizations: {
        description: string;
        hidden: boolean;
        argv: string[];
    };
    organisation: {
        description: string;
        hidden: boolean;
        argv: string[];
    };
    organisations: {
        description: string;
        hidden: boolean;
        argv: string[];
    };
    pkg: {
        description: string;
        hidden: boolean;
        argv: string[];
    };
    repo: {
        description: string;
        hidden: boolean;
        argv: string[];
    };
    repos: {
        description: string;
        hidden: boolean;
        argv: string[];
    };
    repositories: {
        description: string;
        hidden: boolean;
        argv: string[];
    };
};
//# sourceMappingURL=commands.d.mts.map