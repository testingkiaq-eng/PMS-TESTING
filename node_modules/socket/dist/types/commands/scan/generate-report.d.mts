import type { CResult } from '../../types.mts';
import type { SocketArtifact } from '../../utils/alert/artifact.mts';
import type { Spinner } from '@socketsecurity/registry/lib/spinner';
import type { SocketSdkSuccessResult } from '@socketsecurity/sdk';
type AlertKey = string;
type FileMap = Map<string, ReportLeafNode | Map<AlertKey, ReportLeafNode>>;
type VersionMap = Map<string, ReportLeafNode | FileMap>;
type PackageMap = Map<string, ReportLeafNode | VersionMap>;
type EcoMap = Map<string, ReportLeafNode | PackageMap>;
export type ViolationsMap = Map<string, EcoMap>;
export interface ShortScanReport {
    healthy: boolean;
}
export interface ScanReport {
    orgSlug: string;
    scanId: string;
    options: {
        fold: string;
        reportLevel: string;
    };
    healthy: boolean;
    alerts: ViolationsMap;
}
export type ReportLeafNode = {
    type: string;
    policy: 'defer' | 'ignore' | 'monitor' | 'warn' | 'error';
    url: string;
    manifest: string[];
};
// Note: The returned cresult will only be ok:false when the generation
//       failed. It won't reflect the healthy state.
export declare function generateReport(scan: SocketArtifact[], securityPolicy: SocketSdkSuccessResult<'getOrgSecurityPolicy'>['data'], { fold, orgSlug, reportLevel, scanId, short, spinner }: {
    fold: 'pkg' | 'version' | 'file' | 'none';
    orgSlug: string;
    reportLevel: 'defer' | 'ignore' | 'monitor' | 'warn' | 'error';
    scanId: string;
    short?: boolean | undefined;
    spinner?: Spinner | undefined;
}): CResult<ScanReport | {
    healthy: boolean;
}>;
export {};
//# sourceMappingURL=generate-report.d.mts.map