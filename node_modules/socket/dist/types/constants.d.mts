import registryConstants from '@socketsecurity/registry/lib/constants';
import type { Agent } from './utils/package-environment.mts';
import type { Remap } from '@socketsecurity/registry/lib/objects';
export type RegistryEnv = typeof registryConstants.ENV;
export type RegistryInternals = (typeof registryConstants)['Symbol(kInternalsSymbol)'];
export type Sentry = any;
export type Internals = Remap<Omit<RegistryInternals, 'getIpc'> & Readonly<{
    getIpc: {
        (): Promise<IPC>;
        <K extends keyof IPC | undefined>(key?: K | undefined): Promise<K extends keyof IPC ? IPC[K] : IPC>;
    };
    getSentry: () => Sentry;
    setSentry(Sentry: Sentry): boolean;
}>>;
export type ENV = Remap<RegistryEnv & Readonly<{
    DISABLE_GITHUB_CACHE: boolean;
    GITHUB_API_URL: string;
    GITHUB_BASE_REF: string;
    GITHUB_REF_NAME: string;
    GITHUB_REF_TYPE: string;
    GITHUB_REPOSITORY: string;
    GITHUB_SERVER_URL: string;
    GITHUB_TOKEN: string;
    INLINED_SOCKET_CLI_COANA_TECH_CLI_VERSION: string;
    INLINED_SOCKET_CLI_CYCLONEDX_CDXGEN_VERSION: string;
    INLINED_SOCKET_CLI_HOMEPAGE: string;
    INLINED_SOCKET_CLI_LEGACY_BUILD: string;
    INLINED_SOCKET_CLI_NAME: string;
    INLINED_SOCKET_CLI_PUBLISHED_BUILD: string;
    INLINED_SOCKET_CLI_SENTRY_BUILD: string;
    INLINED_SOCKET_CLI_VERSION: string;
    INLINED_SOCKET_CLI_VERSION_HASH: string;
    INLINED_SOCKET_CLI_SYNP_VERSION: string;
    LOCALAPPDATA: string;
    NODE_COMPILE_CACHE: string;
    NODE_EXTRA_CA_CERTS: string;
    PATH: string;
    SOCKET_CLI_ACCEPT_RISKS: boolean;
    SOCKET_CLI_API_BASE_URL: string;
    SOCKET_CLI_API_PROXY: string;
    SOCKET_CLI_API_TIMEOUT: number;
    SOCKET_CLI_API_TOKEN: string;
    SOCKET_CLI_CONFIG: string;
    SOCKET_CLI_GIT_USER_EMAIL: string;
    SOCKET_CLI_GIT_USER_NAME: string;
    SOCKET_CLI_GITHUB_TOKEN: string;
    SOCKET_CLI_NO_API_TOKEN: boolean;
    SOCKET_CLI_NPM_PATH: string;
    SOCKET_CLI_ORG_SLUG: string;
    SOCKET_CLI_VIEW_ALL_RISKS: boolean;
    TERM: string;
    XDG_DATA_HOME: string;
}>>;
export type ProcessEnv = {
    [K in keyof ENV]?: string;
};
export type IPC = Readonly<{
    SOCKET_CLI_FIX?: string | undefined;
    SOCKET_CLI_OPTIMIZE?: boolean | undefined;
    SOCKET_CLI_SHADOW_ACCEPT_RISKS?: boolean | undefined;
    SOCKET_CLI_SHADOW_API_TOKEN?: string | undefined;
    SOCKET_CLI_SHADOW_BIN?: string | undefined;
    SOCKET_CLI_SHADOW_PROGRESS?: boolean | undefined;
    SOCKET_CLI_SHADOW_SILENT?: boolean | undefined;
}>;
export type Constants = Remap<Omit<typeof registryConstants, 'Symbol(kInternalsSymbol)' | 'ENV' | 'IPC'> & {
    readonly 'Symbol(kInternalsSymbol)': Internals;
    readonly ALERT_TYPE_CRITICAL_CVE: 'criticalCVE';
    readonly ALERT_TYPE_CVE: 'cve';
    readonly ALERT_TYPE_MEDIUM_CVE: 'mediumCVE';
    readonly ALERT_TYPE_MILD_CVE: 'mildCVE';
    readonly API_V0_URL: 'https://api.socket.dev/v0/';
    readonly BINARY_LOCK_EXT: '.lockb';
    readonly BUN: 'bun';
    readonly ENV: ENV;
    readonly DOT_SOCKET_DOT_FACTS_JSON: '.socket.facts.json';
    readonly DRY_RUN_LABEL: '[DryRun]';
    readonly DRY_RUN_BAILING_NOW: '[DryRun] Bailing now';
    readonly DRY_RUN_NOT_SAVING: '[DryRun] Not saving';
    readonly IPC: IPC;
    readonly LOCK_EXT: '.lock';
    readonly NPM_BUGGY_OVERRIDES_PATCHED_VERSION: '11.2.0';
    readonly NPM_REGISTRY_URL: 'https://registry.npmjs.org';
    readonly PNPM: 'pnpm';
    readonly REDACTED: '<redacted>';
    readonly SOCKET_CLI_ACCEPT_RISKS: 'SOCKET_CLI_ACCEPT_RISKS';
    readonly SOCKET_CLI_BIN_NAME: 'socket';
    readonly SOCKET_CLI_CONFIG: 'SOCKET_CLI_CONFIG';
    readonly SOCKET_CLI_FIX: 'SOCKET_CLI_FIX';
    readonly SOCKET_CLI_ISSUES_URL: 'https://github.com/SocketDev/socket-cli/issues';
    readonly SOCKET_CLI_OPTIMIZE: 'SOCKET_CLI_OPTIMIZE';
    readonly SOCKET_CLI_SHADOW_ACCEPT_RISKS: 'SOCKET_CLI_SHADOW_ACCEPT_RISKS';
    readonly SOCKET_CLI_SHADOW_API_TOKEN: 'SOCKET_CLI_SHADOW_API_TOKEN';
    readonly SOCKET_CLI_SHADOW_BIN: 'SOCKET_CLI_SHADOW_BIN';
    readonly SOCKET_CLI_SHADOW_PROGRESS: 'SOCKET_CLI_SHADOW_PROGRESS';
    readonly SOCKET_CLI_SHADOW_SILENT: 'SOCKET_CLI_SHADOW_SILENT';
    readonly SOCKET_CLI_VIEW_ALL_RISKS: 'SOCKET_CLI_VIEW_ALL_RISKS';
    readonly SOCKET_DEFAULT_BRANCH: 'socket-default-branch';
    readonly SOCKET_DEFAULT_REPOSITORY: 'socket-default-repository';
    readonly SOCKET_WEBSITE_URL: 'https://socket.dev';
    readonly VLT: 'vlt';
    readonly YARN: 'yarn';
    readonly YARN_BERRY: 'yarn/berry';
    readonly YARN_CLASSIC: 'yarn/classic';
    readonly YARN_LOCK: 'yarn.lock';
    readonly bashRcPath: string;
    readonly binCliPath: string;
    readonly binPath: string;
    readonly blessedContribPath: string;
    readonly blessedOptions: {
        smartCSR: boolean;
        term: string;
        useBCE: boolean;
    };
    readonly blessedPath: string;
    readonly coanaBinPath: string;
    readonly coanaPath: string;
    readonly distCliPath: string;
    readonly distPath: string;
    readonly externalPath: string;
    readonly githubCachePath: string;
    readonly homePath: string;
    readonly instrumentWithSentryPath: string;
    readonly minimumVersionByAgent: Map<Agent, string>;
    readonly nmBinPath: string;
    readonly nodeDebugFlags: string[];
    readonly nodeHardenFlags: string[];
    readonly nodeMemoryFlags: string[];
    readonly npmCachePath: string;
    readonly npmGlobalPrefix: string;
    readonly npmNmNodeGypPath: string;
    readonly processEnv: ProcessEnv;
    readonly rootPath: string;
    readonly shadowBinPath: string;
    readonly shadowNpmBinPath: string;
    readonly shadowNpmInjectPath: string;
    readonly socketAppDataPath: string;
    readonly socketCachePath: string;
    readonly socketRegistryPath: string;
    readonly zshRcPath: string;
}>;
declare const constants: Constants;
export default constants;
//# sourceMappingURL=constants.d.mts.map