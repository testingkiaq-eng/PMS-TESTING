import { fetchPackagePackument } from '@socketsecurity/registry/lib/packages';
import type { ArboristInstance, Diff, LinkClass, NodeClass } from './arborist/types.mts';
import type { RangeStyle } from '../../utils/semver.mts';
import type { AlertFilter, AlertsByPurl } from '../../utils/socket-package-alert.mts';
import type { EditablePackageJson } from '@socketsecurity/registry/lib/packages';
import type { Spinner } from '@socketsecurity/registry/lib/spinner';
export type BestPatchVersionOptions = {
    minSatisfying?: boolean | undefined;
    vulnerableVersionRange?: string | undefined;
};
export declare function findBestPatchVersion(node: NodeClass, availableVersions: string[], options?: BestPatchVersionOptions | undefined): string | null;
export declare function findPackageNode(tree: NodeClass, name: string, version?: string | undefined): NodeClass | undefined;
export declare function findPackageNodes(tree: NodeClass, name: string, version?: string | undefined): NodeClass[];
export type GetAlertsMapFromArboristOptions = {
    apiToken?: string | undefined;
    consolidate?: boolean | undefined;
    filter?: AlertFilter | undefined;
    nothrow?: boolean | undefined;
    spinner?: Spinner | undefined;
};
export declare function getAlertsMapFromArborist(arb: ArboristInstance, needInfoOn: PackageDetail[], options?: GetAlertsMapFromArboristOptions | undefined): Promise<AlertsByPurl>;
export type DiffQueryFilter = {
    existing?: boolean | undefined;
    unknownOrigin?: boolean | undefined;
};
export type DiffQueryOptions = {
    filter?: DiffQueryFilter | undefined;
};
export type PackageDetail = {
    node: NodeClass;
    existing?: NodeClass | undefined;
};
export declare function getDetailsFromDiff(diff: Diff | null, options?: DiffQueryOptions | undefined): PackageDetail[];
export declare function getTargetNode(nodeOrLink: NodeClass | LinkClass): NodeClass;
export declare function getTargetNode<T>(nodeOrLink: T): NodeClass | null;
export declare function isTopLevel(tree: NodeClass, node: NodeClass): boolean;
export type Packument = Exclude<Awaited<ReturnType<typeof fetchPackagePackument>>, null>;
export declare function updateNode(node: NodeClass, newVersion: string, newVersionPackument: Packument['versions'][number]): void;
export declare function updatePackageJsonFromNode(editablePkgJson: EditablePackageJson, tree: NodeClass, node: NodeClass, newVersion: string, rangeStyle?: RangeStyle | undefined): boolean;
//# sourceMappingURL=arborist-helpers.d.mts.map