'use strict';

var require$$9 = require('../external/@socketsecurity/registry/lib/debug');
var npm = require('../external/@socketsecurity/registry/lib/npm');
var require$$11 = require('../external/@socketsecurity/registry/lib/objects');
var spawn = require('../external/@socketsecurity/registry/lib/spawn');
var path = require('node:path');
var vendor = require('./vendor.js');
var constants = require('./constants.js');
var utils = require('./utils.js');

async function installLinks(shadowBinPath, binName) {
  const isNpx = binName === 'npx';
  // Find package manager being shadowed by this process.
  const binPath = isNpx ? utils.getNpxBinPath() : utils.getNpmBinPath();
  const {
    WIN32
  } = constants;
  // TODO: Is this early exit needed?
  if (WIN32 && binPath) {
    return binPath;
  }
  const shadowed = isNpx ? utils.isNpxBinPathShadowed() : utils.isNpmBinPathShadowed();
  // Move our bin directory to front of PATH so its found first.
  if (!shadowed) {
    if (WIN32) {
      await vendor.libExports(path.join(constants.distPath, `${binName}-cli.js`), path.join(shadowBinPath, binName));
    }
    const {
      env
    } = process;
    env['PATH'] = `${shadowBinPath}${path.delimiter}${env['PATH']}`;
  }
  return binPath;
}

async function shadowBin(binName, args = process.argv.slice(2), options, extra) {
  const {
    env: spawnEnv,
    ipc,
    ...spawnOpts
  } = {
    __proto__: null,
    ...options
  };
  const cwd = require$$11.getOwn(spawnOpts, 'cwd') ?? process.cwd();
  const isShadowNpm = binName === 'npm';
  const terminatorPos = args.indexOf('--');
  const rawBinArgs = terminatorPos === -1 ? args : args.slice(0, terminatorPos);
  const nodeOptionsArg = rawBinArgs.findLast(npm.isNpmNodeOptionsFlag);
  const progressArg = rawBinArgs.findLast(npm.isNpmProgressFlag) !== '--no-progress';
  const otherArgs = terminatorPos === -1 ? [] : args.slice(terminatorPos);
  const permArgs = isShadowNpm && constants.SUPPORTS_NODE_PERMISSION_FLAG ? ['--permission', '--allow-child-process',
  // '--allow-addons',
  // '--allow-wasi',
  // Allow all reads because npm walks up directories looking for config
  // and package.json files.
  '--allow-fs-read=*', `--allow-fs-write=${cwd}/*`, `--allow-fs-write=${constants.npmGlobalPrefix}/*`, `--allow-fs-write=${constants.npmCachePath}/*`] : [];
  const useAudit = rawBinArgs.includes('--audit');
  const useDebug = require$$9.isDebug('stdio');
  const useNodeOptions = nodeOptionsArg || permArgs.length;
  const binArgs = rawBinArgs.filter(a => !npm.isNpmAuditFlag(a) && !npm.isNpmProgressFlag(a));
  const isSilent = !useDebug && !binArgs.some(npm.isNpmLoglevelFlag);
  // The default value of loglevel is "notice". We default to "error" which is
  // two levels quieter.
  const logLevelArgs = isSilent ? ['--loglevel', 'error'] : [];
  const noAuditArgs = useAudit || !(await utils.findUp('node_modules', {
    cwd,
    onlyDirectories: true
  })) ? [] : ['--no-audit'];
  let stdio = require$$11.getOwn(spawnOpts, 'stdio');
  if (typeof stdio === 'string') {
    stdio = [stdio, stdio, stdio, 'ipc'];
  } else if (Array.isArray(stdio)) {
    if (!stdio.includes('ipc')) {
      stdio = stdio.concat('ipc');
    }
  } else {
    stdio = ['pipe', 'pipe', 'pipe', 'ipc'];
  }
  const realBinPath = await installLinks(constants.shadowBinPath, binName);
  const spawnPromise = spawn.spawn(constants.execPath, [...constants.nodeNoWarningsFlags, ...constants.nodeDebugFlags, ...constants.nodeHardenFlags, ...constants.nodeMemoryFlags, ...(constants.ENV.INLINED_SOCKET_CLI_SENTRY_BUILD ? ['--require', constants.instrumentWithSentryPath] : []), '--require', constants.shadowNpmInjectPath, realBinPath, ...noAuditArgs, ...(useNodeOptions ? [`--node-options='${nodeOptionsArg ? nodeOptionsArg.slice(15) : ''}${utils.cmdFlagsToString(permArgs)}'`] : []), '--no-fund',
  // Add '--no-progress' to fix input being swallowed by the npm spinner.
  '--no-progress',
  // Add '--loglevel=error' if a loglevel flag is not provided and the
  // SOCKET_CLI_DEBUG environment variable is not truthy.
  ...logLevelArgs, ...binArgs, ...otherArgs], {
    ...spawnOpts,
    env: {
      ...process.env,
      ...constants.processEnv,
      ...spawnEnv
    },
    stdio
  }, extra);
  spawnPromise.process.send({
    [constants.SOCKET_IPC_HANDSHAKE]: {
      [constants.SOCKET_CLI_SHADOW_API_TOKEN]: utils.getPublicApiToken(),
      [constants.SOCKET_CLI_SHADOW_BIN]: binName,
      [constants.SOCKET_CLI_SHADOW_PROGRESS]: progressArg,
      ...ipc
    }
  });
  return {
    spawnPromise
  };
}

module.exports = shadowBin;
//# debugId=3db6aa47-ab77-4ba0-8e8b-08bbbbf027ee
//# sourceMappingURL=shadow-npm-bin.js.map
